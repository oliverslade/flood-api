// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countRainfallReadingsByStationStmt, err = db.PrepareContext(ctx, countRainfallReadingsByStation); err != nil {
		return nil, fmt.Errorf("error preparing query CountRainfallReadingsByStation: %w", err)
	}
	if q.countRainfallReadingsByStationWithStartDateStmt, err = db.PrepareContext(ctx, countRainfallReadingsByStationWithStartDate); err != nil {
		return nil, fmt.Errorf("error preparing query CountRainfallReadingsByStationWithStartDate: %w", err)
	}
	if q.countRiverReadingsStmt, err = db.PrepareContext(ctx, countRiverReadings); err != nil {
		return nil, fmt.Errorf("error preparing query CountRiverReadings: %w", err)
	}
	if q.countRiverReadingsWithStartDateStmt, err = db.PrepareContext(ctx, countRiverReadingsWithStartDate); err != nil {
		return nil, fmt.Errorf("error preparing query CountRiverReadingsWithStartDate: %w", err)
	}
	if q.getRainfallReadingsByStationStmt, err = db.PrepareContext(ctx, getRainfallReadingsByStation); err != nil {
		return nil, fmt.Errorf("error preparing query GetRainfallReadingsByStation: %w", err)
	}
	if q.getRainfallReadingsByStationWithStartDateStmt, err = db.PrepareContext(ctx, getRainfallReadingsByStationWithStartDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetRainfallReadingsByStationWithStartDate: %w", err)
	}
	if q.getRiverReadingsStmt, err = db.PrepareContext(ctx, getRiverReadings); err != nil {
		return nil, fmt.Errorf("error preparing query GetRiverReadings: %w", err)
	}
	if q.getRiverReadingsWithStartDateStmt, err = db.PrepareContext(ctx, getRiverReadingsWithStartDate); err != nil {
		return nil, fmt.Errorf("error preparing query GetRiverReadingsWithStartDate: %w", err)
	}
	if q.getStationByIDStmt, err = db.PrepareContext(ctx, getStationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStationByID: %w", err)
	}
	if q.getStationByNameStmt, err = db.PrepareContext(ctx, getStationByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetStationByName: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countRainfallReadingsByStationStmt != nil {
		if cerr := q.countRainfallReadingsByStationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRainfallReadingsByStationStmt: %w", cerr)
		}
	}
	if q.countRainfallReadingsByStationWithStartDateStmt != nil {
		if cerr := q.countRainfallReadingsByStationWithStartDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRainfallReadingsByStationWithStartDateStmt: %w", cerr)
		}
	}
	if q.countRiverReadingsStmt != nil {
		if cerr := q.countRiverReadingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRiverReadingsStmt: %w", cerr)
		}
	}
	if q.countRiverReadingsWithStartDateStmt != nil {
		if cerr := q.countRiverReadingsWithStartDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRiverReadingsWithStartDateStmt: %w", cerr)
		}
	}
	if q.getRainfallReadingsByStationStmt != nil {
		if cerr := q.getRainfallReadingsByStationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRainfallReadingsByStationStmt: %w", cerr)
		}
	}
	if q.getRainfallReadingsByStationWithStartDateStmt != nil {
		if cerr := q.getRainfallReadingsByStationWithStartDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRainfallReadingsByStationWithStartDateStmt: %w", cerr)
		}
	}
	if q.getRiverReadingsStmt != nil {
		if cerr := q.getRiverReadingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRiverReadingsStmt: %w", cerr)
		}
	}
	if q.getRiverReadingsWithStartDateStmt != nil {
		if cerr := q.getRiverReadingsWithStartDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRiverReadingsWithStartDateStmt: %w", cerr)
		}
	}
	if q.getStationByIDStmt != nil {
		if cerr := q.getStationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStationByIDStmt: %w", cerr)
		}
	}
	if q.getStationByNameStmt != nil {
		if cerr := q.getStationByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStationByNameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                              DBTX
	tx                                              *sql.Tx
	countRainfallReadingsByStationStmt              *sql.Stmt
	countRainfallReadingsByStationWithStartDateStmt *sql.Stmt
	countRiverReadingsStmt                          *sql.Stmt
	countRiverReadingsWithStartDateStmt             *sql.Stmt
	getRainfallReadingsByStationStmt                *sql.Stmt
	getRainfallReadingsByStationWithStartDateStmt   *sql.Stmt
	getRiverReadingsStmt                            *sql.Stmt
	getRiverReadingsWithStartDateStmt               *sql.Stmt
	getStationByIDStmt                              *sql.Stmt
	getStationByNameStmt                            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		countRainfallReadingsByStationStmt: q.countRainfallReadingsByStationStmt,
		countRainfallReadingsByStationWithStartDateStmt: q.countRainfallReadingsByStationWithStartDateStmt,
		countRiverReadingsStmt:                          q.countRiverReadingsStmt,
		countRiverReadingsWithStartDateStmt:             q.countRiverReadingsWithStartDateStmt,
		getRainfallReadingsByStationStmt:                q.getRainfallReadingsByStationStmt,
		getRainfallReadingsByStationWithStartDateStmt:   q.getRainfallReadingsByStationWithStartDateStmt,
		getRiverReadingsStmt:                            q.getRiverReadingsStmt,
		getRiverReadingsWithStartDateStmt:               q.getRiverReadingsWithStartDateStmt,
		getStationByIDStmt:                              q.getStationByIDStmt,
		getStationByNameStmt:                            q.getStationByNameStmt,
	}
}
